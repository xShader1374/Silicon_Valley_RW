[gd_scene load_steps=32 format=3 uid="uid://cc1m2a1obsyn4"]

[ext_resource type="Script" uid="uid://cvqbknf1c8dgx" path="res://scenes/game/character/character.gd" id="1_0t4e8"]
[ext_resource type="PackedScene" uid="uid://3euw0wojttkh" path="res://scenes/game/character/weapon/current_weapon.tscn" id="2_qloyw"]
[ext_resource type="Script" uid="uid://d02c1xkascjq6" path="res://scripts/state_machine.gd" id="2_xxa1y"]
[ext_resource type="Script" uid="uid://dnyig7r8ujbid" path="res://scenes/game/character/air_jump.gd" id="4_rp2q2"]

[sub_resource type="GDScript" id="GDScript_rp2q2"]
script/source = "extends State
class_name CharacterDashState

## Dash enabled.
@export var ENABLED: bool = true
## Speed of the dash.
@export var SPEED: float = 20
## Duration of the dash in seconds: How fast the dash will be.
@export var DURATION_SEC: float = 0.3
## Cooldown of the dash in seconds: How long until the dash can be used again.
@export var COOLDOWN_SEC: float = 1.0
## Double tap time in seconds: The arc of time in which the dash can be activated by double tapping.
@export var DOUBLE_TAP_SEC: float = 0.2
## Max number of dashes in air you can do before touching ground
@export var MAX_AIR_DASHES: int =  1

var DURATION_TIMER: Timer
var COOLDOWN_TIMER: Timer

var dashing: bool = false
var air_dashes: int = 0

func _ready() -> void:
	super()
	state_name = States.States.DASHING
	DURATION_TIMER = Utils.timer_from_time(DURATION_SEC, true, self, end_dash)
	COOLDOWN_TIMER = Utils.timer_from_time(COOLDOWN_SEC, true, self)

func can_dash() -> bool:
	if not ENABLED:
		return false
		
	if character_node.is_on_floor():
		air_dashes = 0
	elif air_dashes >= MAX_AIR_DASHES:
		return false
		
	return not dashing and COOLDOWN_TIMER.is_stopped()

func end_dash():
	character_node.last_action_tap = ''
	dashing = false
	COOLDOWN_TIMER.start()

func direction_from_facing(facing_direction: Vector3) -> Dictionary:
	var right = facing_direction.cross(Vector3.UP).normalized()
	return {
		character_node.MOVIMENT_CONTROLS.LEFT: - right,
		character_node.MOVIMENT_CONTROLS.RIGHT: right,
		character_node.MOVIMENT_CONTROLS.FORWARD: facing_direction,
		character_node.MOVIMENT_CONTROLS.BACKWARD: - facing_direction
	}

func do_dash(facing_direction: Vector3) -> void:
	var direction = direction_from_facing(facing_direction)[character_node.last_action_tap]
	direction.y = 0
	var tw: Tween = character_node.get_tree().create_tween()
	tw.tween_property(character_node, \"velocity\", direction * SPEED, DURATION_SEC)
	DURATION_TIMER.start()
	dashing = true
	if character_node.is_in_air():
		air_dashes += 1
	

func is_dashing() -> bool:
	return dashing

func _physics_process(delta: float) -> void:
	if DURATION_TIMER.is_stopped():
		character_node.state_machine.switch_movement_state(States.States.IDLE)

func enter_state():
	var facing_direction: Vector3 = character_node.get_facing_direction()
	do_dash(facing_direction)
	print(\"Enter Dash State\")
	
func exit_state():
	character_node.last_action_tap = ''
	COOLDOWN_TIMER.start()
	print(\"Exit Dash State\")
"

[sub_resource type="GDScript" id="GDScript_xxa1y"]
script/source = "extends State
class_name CharacterIdleState

func _ready() -> void:
	super()
	state_name = States.States.IDLE

func _physics_process(_delta: float) -> void:
	# TODO: Pensare a un modo migliore che non implichi l'uso del dollaro.
	if character_node.is_double_tap and $\"../DashState\".can_dash():
		character_node.state_machine.switch_movement_state(States.States.DASHING)
	
	if character_node.is_on_floor() and character_node.input_dir != Vector2.ZERO:
		character_node.state_machine.switch_movement_state(States.States.WALKING)

	
func _input(event: InputEvent) -> void:
	if character_node.is_on_floor() and event.is_action_pressed(character_node.CONTROLS.JUMP):
		if !character_node.low_ceiling:
			character_node.state_machine.switch_movement_state(States.States.JUMPING)
	
	if event.is_action_pressed(character_node.CONTROLS.CROUCH):
		character_node.state_machine.switch_movement_state(States.States.CROUCHING)

func enter_state():
	character_node.speed = character_node.BASE_SPEED
	print(\"Enter Idle State\")
	
func exit_state():
	print(\"Exit Idle State\")
"

[sub_resource type="GDScript" id="GDScript_q5mc8"]
script/source = "extends State
class_name CharacterWalkState

func _ready() -> void:
	super()
	state_name = States.States.WALKING

func _physics_process(_delta: float) -> void:
	# TODO: Pensare a un modo migliore che non implichi l'uso del dollaro.
	if character_node.is_double_tap and $\"../DashState\".can_dash():
		character_node.state_machine.switch_movement_state(States.States.DASHING)
		
	if character_node.sprint_enabled:
		if character_node.sprint_mode == 0:
			if character_node.is_on_floor() and character_node.input_dir == Vector2.ZERO:
				character_node.state_machine.switch_movement_state(States.States.IDLE)
	
func _input(event: InputEvent) -> void:
	if character_node.is_on_floor() and event.is_action_pressed(character_node.CONTROLS.JUMP):
		if !character_node.low_ceiling:
			character_node.state_machine.switch_movement_state(States.States.JUMPING)
	# Se il personaggio prova a sprintare
	if event.is_action_pressed(character_node.CONTROLS.SPRINT):
		character_node.state_machine.switch_movement_state(States.States.SPRINTING)
		
	if event.is_action_pressed(character_node.CONTROLS.CROUCH):
		character_node.state_machine.switch_movement_state(States.States.CROUCHING)
	

func enter_state():
	character_node.speed = character_node.BASE_SPEED
	if Input.is_action_pressed(character_node.CONTROLS.SPRINT):
		character_node.state_machine.switch_movement_state(States.States.SPRINTING)
	print(\"Enter Walk State\")
	
func exit_state():
	print(\"Exit Walk State\")
"

[sub_resource type="GDScript" id="GDScript_xw4rn"]
script/source = "extends State
class_name CharacterCrouchState

func _ready() -> void:
	super()
	state_name = States.States.CROUCHING

func _physics_process(_delta: float) -> void:
	pass

func _input(event: InputEvent) -> void:
	if event.is_action_released(character_node.CONTROLS.CROUCH):
		character_node.state_machine.switch_movement_state(States.States.IDLE)

func enter_state():
	character_node.speed = character_node.CROUCH_SPEED
	character_node.CROUCH_ANIMATION.play(\"crouch\")
	print(\"Enter Crouch State\")
	
func exit_state():
	character_node.speed = character_node.BASE_SPEED
	character_node.CROUCH_ANIMATION.play_backwards(\"crouch\")
	print(\"Exit Crouch State\")
"

[sub_resource type="GDScript" id="GDScript_1vggp"]
script/source = "extends State
class_name CharacterJumpState

func _ready() -> void:
	super()
	state_name = States.States.JUMPING

func _physics_process(_delta: float) -> void:
	if character_node.is_on_floor():
		character_node.state_machine.switch_movement_state(States.States.IDLE)
	
func _input(event: InputEvent) -> void:
	pass

func enter_state():
	character_node.JUMP_ANIMATION.play(\"jump\", 0.25)
	character_node.velocity.y += character_node.JUMP_VELOCITY
	print(\"Enter Jump State\")
	
func exit_state():
	play_jump_animation()
	print(\"Exit Jump State\")

func play_jump_animation():
	var facing_direction : Vector3 = character_node.CAMERA.get_global_transform().basis.x
	var facing_direction_2D : Vector2 = Vector2(facing_direction.x, facing_direction.z).normalized()
	var velocity_2D : Vector2 = Vector2( character_node.velocity.x,  character_node.velocity.z).normalized()

	# Compares velocity direction against the camera direction (via dot product) to determine which landing animation to play.
	var side_landed : int = round(velocity_2D.dot(facing_direction_2D))

	if side_landed > 0:
		character_node.JUMP_ANIMATION.play(\"land_right\", 0.25)
	elif side_landed < 0:
		character_node.JUMP_ANIMATION.play(\"land_left\", 0.25)
	else:
		character_node.JUMP_ANIMATION.play(\"land_center\", 0.25)
"

[sub_resource type="GDScript" id="GDScript_1of0f"]
script/source = "extends State
class_name CharacterSprintState

func _ready() -> void:
	super()
	state_name = States.States.SPRINTING

func _physics_process(_delta: float) -> void:
	# TODO: Pensare a un modo migliore che non implichi l'uso del dollaro.
	if character_node.is_double_tap and $\"../DashState\".can_dash():
		character_node.state_machine.switch_movement_state(States.States.DASHING)
	
	# Se il personaggio rimane fermo
	if character_node.is_on_floor() and character_node.input_dir == Vector2.ZERO:
		character_node.state_machine.switch_movement_state(States.States.IDLE)
	
func _input(event: InputEvent) -> void:
	if character_node.is_on_floor() and event.is_action_pressed(character_node.CONTROLS.JUMP):
		if !character_node.low_ceiling:
			character_node.state_machine.switch_movement_state(States.States.JUMPING)

	if event.is_action_released(character_node.CONTROLS.SPRINT):
		character_node.state_machine.switch_movement_state(States.States.WALKING)
		
	if event.is_action_pressed(character_node.CONTROLS.CROUCH):
		character_node.state_machine.switch_movement_state(States.States.CROUCHING)

func enter_state():
	character_node.speed = character_node.SPRINT_SPEED
	if character_node.dynamic_fov:
		var tween = create_tween()
		tween.tween_property(character_node.CAMERA, \"fov\", 85.0, 0.3)
	print(\"Enter Sprint State\")
	
func exit_state():
	if character_node.dynamic_fov:
		var tween = create_tween()
		tween.tween_property(character_node.CAMERA, \"fov\", 75.0, 0.3)
	print(\"Exit Sprint State\")
"

[sub_resource type="GDScript" id="GDScript_gagoa"]
script/source = "extends State
class_name CharacterNoneState

func _ready() -> void:
	super()
	state_name = States.States.NONE

func _physics_process(_delta: float) -> void:
	pass
	
func _input(event: InputEvent) -> void:
	pass

func enter_state():
	print(\"Enter None State\")
	
func exit_state():
	print(\"Exit None State\")
"

[sub_resource type="GDScript" id="GDScript_lytkp"]
script/source = "extends State
class_name CharacterAttackState

func _ready() -> void:
	super()
	state_name = States.States.ATTACK

func _physics_process(_delta: float) -> void:
	pass
	
func _input(event: InputEvent) -> void:
	pass

func enter_state():
	print(\"Enter Dash State\")
	
func exit_state():
	print(\"Exit Dash State\")
"

[sub_resource type="GDScript" id="GDScript_56jte"]
script/source = "extends State
class_name CharacterParryState

func _ready() -> void:
	super()
	state_name = States.States.PARRY

func _physics_process(_delta: float) -> void:
	pass
	
func _input(event: InputEvent) -> void:
	pass

func enter_state():
	print(\"Enter Parry State\")
	
func exit_state():
	print(\"Exit Parry State\")
"

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_kp17n"]
albedo_color = Color(0.909804, 0.596078, 0, 1)
clearcoat_enabled = true
clearcoat_roughness = 0.2

[sub_resource type="CapsuleMesh" id="CapsuleMesh_jw1de"]
material = SubResource("StandardMaterial3D_kp17n")

[sub_resource type="CapsuleShape3D" id="CapsuleShape3D_uy03j"]

[sub_resource type="Animation" id="Animation_j8cx7"]
resource_name = "RESET"
length = 0.001
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Mesh:position")
tracks/0/interp = 2
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Vector3(0, 1, 0)]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("Collision:position")
tracks/1/interp = 2
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Vector3(0, 1, 0)]
}
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("Head:position")
tracks/2/interp = 2
tracks/2/loop_wrap = true
tracks/2/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Vector3(0, 1.5, 0)]
}
tracks/3/type = "value"
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/path = NodePath("Mesh:mesh:height")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [2.0]
}
tracks/4/type = "value"
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/path = NodePath("Collision:shape:height")
tracks/4/interp = 1
tracks/4/loop_wrap = true
tracks/4/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [2.0]
}

[sub_resource type="Animation" id="Animation_5ec5e"]
resource_name = "crouch"
length = 0.2
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Mesh:position")
tracks/0/interp = 2
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.2),
"transitions": PackedFloat32Array(1, 1),
"update": 0,
"values": [Vector3(0, 1, 0), Vector3(0, 0.5, 0)]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("Collision:position")
tracks/1/interp = 2
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0, 0.2),
"transitions": PackedFloat32Array(1, 1),
"update": 0,
"values": [Vector3(0, 1, 0), Vector3(0, 0.5, 0)]
}
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("Head:position")
tracks/2/interp = 2
tracks/2/loop_wrap = true
tracks/2/keys = {
"times": PackedFloat32Array(0, 0.2),
"transitions": PackedFloat32Array(1, 1),
"update": 0,
"values": [Vector3(0, 1.5, 0), Vector3(0, 0.75, 0)]
}
tracks/3/type = "value"
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/path = NodePath("Mesh:mesh:height")
tracks/3/interp = 2
tracks/3/loop_wrap = true
tracks/3/keys = {
"times": PackedFloat32Array(0, 0.2),
"transitions": PackedFloat32Array(1, 1),
"update": 0,
"values": [2.0, 1.5]
}
tracks/4/type = "value"
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/path = NodePath("Collision:shape:height")
tracks/4/interp = 2
tracks/4/loop_wrap = true
tracks/4/keys = {
"times": PackedFloat32Array(0, 0.2),
"transitions": PackedFloat32Array(1, 1),
"update": 0,
"values": [2.0, 1.0]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_5e5t5"]
_data = {
&"RESET": SubResource("Animation_j8cx7"),
&"crouch": SubResource("Animation_5ec5e")
}

[sub_resource type="Animation" id="Animation_gh776"]
resource_name = "RESET"
length = 0.001
loop_mode = 1
tracks/0/type = "bezier"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Camera:position:x")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"handle_modes": PackedInt32Array(0),
"points": PackedFloat32Array(0, -0.25, 0, 0.25, 0),
"times": PackedFloat32Array(0)
}
tracks/1/type = "bezier"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("Camera:position:y")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"handle_modes": PackedInt32Array(0),
"points": PackedFloat32Array(0, -0.25, 0, 0.25, 0),
"times": PackedFloat32Array(0)
}

[sub_resource type="Animation" id="Animation_8ku67"]
resource_name = "sprint"
length = 2.0
loop_mode = 1
tracks/0/type = "bezier"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Camera:position:x")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"handle_modes": PackedInt32Array(0, 1, 0, 1, 0),
"points": PackedFloat32Array(0.06, -0.25, 0, 0.25, -0.01, 0, 0, 0, 0, 0, -0.06, -0.25, 0.01, 0.25, 0.01, 0, 0, 0, 0, 0, 0.06, -0.25, -0.01, 0.25, 0),
"times": PackedFloat32Array(0, 0.5, 1, 1.5, 2)
}
tracks/1/type = "bezier"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("Camera:position:y")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"handle_modes": PackedInt32Array(0, 0, 0, 0, 0),
"points": PackedFloat32Array(0.05, -0.25, 0, 0.2, -0.01, 0, -0.2, 0.000186046, 0.2, 0.000186046, 0.05, -0.2, -0.01, 0.2, -0.01, 0, -0.2, 0, 0.2, 0, 0.05, -0.2, -0.01, 0.25, 0),
"times": PackedFloat32Array(0, 0.5, 1, 1.5, 2)
}

[sub_resource type="Animation" id="Animation_lrqmv"]
resource_name = "walk"
length = 2.0
loop_mode = 1
tracks/0/type = "bezier"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Camera:position:x")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"handle_modes": PackedInt32Array(0, 1, 0, 1, 0),
"points": PackedFloat32Array(0.04, -0.25, 0, 0.25, 0, 0, 0, 0, 0, 0, -0.04, -0.25, 0, 0.25, 0, 0, 0, 0, 0, 0, 0.04, -0.25, 0, 0.25, 0),
"times": PackedFloat32Array(0, 0.5, 1, 1.5, 2)
}
tracks/1/type = "bezier"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("Camera:position:y")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"handle_modes": PackedInt32Array(0, 0, 0, 0, 0),
"points": PackedFloat32Array(-0.05, -0.25, 0, 0.2, 0.005, 0, -0.2, 0.000186046, 0.2, 0.000186046, -0.05, -0.2, 0.005, 0.2, 0.005, 0, -0.2, 0, 0.2, 0, -0.05, -0.2, 0.005, 0.25, 0),
"times": PackedFloat32Array(0, 0.5, 1, 1.5, 2)
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_o0unb"]
_data = {
&"RESET": SubResource("Animation_gh776"),
&"sprint": SubResource("Animation_8ku67"),
&"walk": SubResource("Animation_lrqmv")
}

[sub_resource type="Animation" id="Animation_fvvjq"]
length = 0.001
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Camera:rotation")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Vector3(0, 0, 0)]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("Camera:position")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Vector3(0, 0, 0)]
}

[sub_resource type="Animation" id="Animation_s07ye"]
resource_name = "jump"
length = 3.0
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Camera:rotation")
tracks/0/interp = 2
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.6, 3),
"transitions": PackedFloat32Array(1, 1, 1),
"update": 0,
"values": [Vector3(0, 0, 0), Vector3(0.0349066, 0, 0), Vector3(0, 0, 0)]
}

[sub_resource type="Animation" id="Animation_3eyjl"]
resource_name = "land_center"
length = 1.5
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Camera:rotation")
tracks/0/interp = 2
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.5, 1.5),
"transitions": PackedFloat32Array(1, 1, 1),
"update": 0,
"values": [Vector3(0, 0, 0), Vector3(-0.0349066, 0, 0), Vector3(0, 0, 0)]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("Camera:position")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0, 0.5, 1.5),
"transitions": PackedFloat32Array(1, 1, 1),
"update": 0,
"values": [Vector3(0, 0, 0), Vector3(0, -0.1, 0), Vector3(0, 0, 0)]
}

[sub_resource type="Animation" id="Animation_l1rph"]
resource_name = "land_left"
length = 1.5
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Camera:rotation")
tracks/0/interp = 2
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.5, 1.5),
"transitions": PackedFloat32Array(1, 1, 1),
"update": 0,
"values": [Vector3(0, 0, 0), Vector3(-0.0349066, 0, 0.0174533), Vector3(0, 0, 0)]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("Camera:position")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0, 0.5, 1.5),
"transitions": PackedFloat32Array(1, 1, 1),
"update": 0,
"values": [Vector3(0, 0, 0), Vector3(0, -0.1, 0), Vector3(0, 0, 0)]
}

[sub_resource type="Animation" id="Animation_vsknp"]
resource_name = "land_right"
length = 1.5
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Camera:rotation")
tracks/0/interp = 2
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.5, 1.5),
"transitions": PackedFloat32Array(1, 1, 1),
"update": 0,
"values": [Vector3(0, 0, 0), Vector3(-0.0349066, 0, -0.0174533), Vector3(0, 0, 0)]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("Camera:position")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0, 0.5, 1.5),
"transitions": PackedFloat32Array(1, 1, 1),
"update": 0,
"values": [Vector3(0, 0, 0), Vector3(0, -0.1, 0), Vector3(0, 0, 0)]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_qeg5r"]
_data = {
&"RESET": SubResource("Animation_fvvjq"),
&"jump": SubResource("Animation_s07ye"),
&"land_center": SubResource("Animation_3eyjl"),
&"land_left": SubResource("Animation_l1rph"),
&"land_right": SubResource("Animation_vsknp")
}

[sub_resource type="BoxShape3D" id="BoxShape3D_qloyw"]
size = Vector3(1, 1.60107, 0.261597)

[sub_resource type="SphereShape3D" id="SphereShape3D_k4wwl"]

[node name="Character" type="CharacterBody3D" node_paths=PackedStringArray("state_machine", "HEAD", "CAMERA", "HEADBOB_ANIMATION", "JUMP_ANIMATION", "CROUCH_ANIMATION", "COLLISION_MESH", "WEAPON", "DEFEND_ZONE")]
editor_description = "removed reticle control"
transform = Transform3D(-4.37114e-08, 0, -1, 0, 1, 0, 1, 0, -4.37114e-08, 0, 0, 0)
script = ExtResource("1_0t4e8")
state_machine = NodePath("StateMachine")
JUMP_VELOCITY = 12.0
HEAD = NodePath("Head")
CAMERA = NodePath("Head/Camera")
HEADBOB_ANIMATION = NodePath("Head/HeadbobAnimation")
JUMP_ANIMATION = NodePath("Head/JumpAnimation")
CROUCH_ANIMATION = NodePath("CrouchAnimation")
COLLISION_MESH = NodePath("Collision")
DOUBLE_JUMP_ENABLED = true
WEAPON = NodePath("Head/Weapon")
DEFEND_ZONE = NodePath("Head/DefendZone")

[node name="StateMachine" type="Node" parent="." node_paths=PackedStringArray("movement_states", "action_states", "current_movement", "current_action")]
script = ExtResource("2_xxa1y")
movement_states = [NodePath("IdleState"), NodePath("WalkState"), NodePath("CrouchState"), NodePath("DashState"), NodePath("JumpState"), NodePath("SprintState")]
action_states = [NodePath("NoneState"), NodePath("AttackState"), NodePath("ParryState")]
current_movement = NodePath("IdleState")
current_action = NodePath("NoneState")

[node name="DashState" type="Node" parent="StateMachine"]
script = SubResource("GDScript_rp2q2")

[node name="IdleState" type="Node" parent="StateMachine"]
script = SubResource("GDScript_xxa1y")

[node name="WalkState" type="Node" parent="StateMachine"]
script = SubResource("GDScript_q5mc8")

[node name="CrouchState" type="Node" parent="StateMachine"]
script = SubResource("GDScript_xw4rn")

[node name="JumpState" type="Node" parent="StateMachine"]
script = SubResource("GDScript_1vggp")

[node name="SprintState" type="Node" parent="StateMachine"]
script = SubResource("GDScript_1of0f")

[node name="NoneState" type="Node" parent="StateMachine"]
script = SubResource("GDScript_gagoa")

[node name="AttackState" type="Node" parent="StateMachine"]
script = SubResource("GDScript_lytkp")

[node name="ParryState" type="Node" parent="StateMachine"]
script = SubResource("GDScript_56jte")

[node name="AirJump" type="Node" parent="."]
script = ExtResource("4_rp2q2")
COOLDOWN_SEC = 0.5

[node name="Mesh" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0)
mesh = SubResource("CapsuleMesh_jw1de")

[node name="Collision" type="CollisionShape3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0)
shape = SubResource("CapsuleShape3D_uy03j")

[node name="CrouchAnimation" type="AnimationPlayer" parent="."]
libraries = {
&"": SubResource("AnimationLibrary_5e5t5")
}

[node name="Head" type="Node3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1.5, 0)

[node name="Camera" type="Camera3D" parent="Head"]

[node name="HeadbobAnimation" type="AnimationPlayer" parent="Head"]
libraries = {
&"": SubResource("AnimationLibrary_o0unb")
}
blend_times = [&"RESET", &"RESET", 0.5, &"RESET", &"walk", 0.5, &"walk", &"RESET", 0.5]

[node name="JumpAnimation" type="AnimationPlayer" parent="Head"]
libraries = {
&"": SubResource("AnimationLibrary_qeg5r")
}
speed_scale = 4.0

[node name="Weapon" parent="Head" instance=ExtResource("2_qloyw")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0.555606, -0.396442, -0.776575)

[node name="DefendZone" type="Area3D" parent="Head"]

[node name="CollisionShape3D" type="CollisionShape3D" parent="Head/DefendZone"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 1.32621e-08, -0.300537, -0.573492)
shape = SubResource("BoxShape3D_qloyw")

[node name="CrouchCeilingDetection" type="ShapeCast3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0)
shape = SubResource("SphereShape3D_k4wwl")
target_position = Vector3(0, 0.5, 0)
